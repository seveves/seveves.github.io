{"version":3,"sources":["webpack:///main.c1d3693e512a10d939c7.bundle.js","webpack:///./components/network/index.ts","webpack:///./components/network/vis-network.directive.ts","webpack:///./components/network/vis-network.service.ts","webpack:///./demo/demo.component.ts","webpack:///./demo/demo.module.ts","webpack:///./demo/index.ts","webpack:///./demo/network/network-example.component.css","webpack:///./demo/network/network-example.component.html","webpack:///./demo/network/network-example.component.ts","webpack:///./ng2-vis.ts"],"names":["webpackJsonp","117","module","exports","__webpack_require__","__export","m","p","hasOwnProperty","286","core_1","vis_network_service_1","VisNetworkDirective","elementRef","visNetworkService","this","initialized","EventEmitter","_isInitialized","_visNetworkContainer","nativeElement","prototype","ngOnInit","visNetwork","visNetworkData","createNetwork","ngOnChanges","changes","propertyName","change","isFirstChange","setData","currentValue","setOptions","ngOnDestroy","destroy","create","visNetworkOptions","emit","__decorate","Input","__metadata","String","Object","Output","Directive","selector","ElementRef","VisNetworkService","118","Vis","click","doubleClick","oncontext","hold","release","select","selectNode","selectEdge","deselectNode","deselectEdge","dragStart","dragging","dragEnd","hoverNode","blurNode","hoverEdge","blurEdge","zoom","showPopup","hidePopup","startStabilizing","stabilizationProgress","stabilizationIterationsDone","stabilized","resize","initRedraw","beforeDrawing","afterDrawing","animationFinished","configChange","_networks","container","data","options","Error","Network","on","eventName","that_1","params","emitter","concat","off","once","_this","that_2","selectNodes","nodeIds","highlightEdges","getSelection","getSelectedNodes","getSelectedEdges","unselectAll","fit","redraw","enableEditMode","addEdgeMode","disableEditMode","deleteSelected","cluster","openCluster","nodeId","isCluster","getSeed","Injectable","287","DemoComponent","Component","template","288","forms_1","platform_browser_1","common_1","network_example_component_1","ng2_vis_1","demo_component_1","VisDemoModule","NgModule","declarations","VisNetworkExampleComponent","imports","BrowserModule","FormsModule","VisModule","CommonModule","providers","bootstrap","0","platform_browser_dynamic_1","demo_module_1","platformBrowserDynamic","bootstrapModule","120","121","289","network_1","addNode","length","nodes","push","id","toString","label","newNetworkData","edges","networkInitialized","subscribe","eventData","console","log","from","to","styles","290"],"mappings":"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","file":"main.c1d3693e512a10d939c7.bundle.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 117:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(286));\r\n\t__export(__webpack_require__(118));\r\n\n\n/***/ },\n\n/***/ 286:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(13);\r\n\tvar Vis = __webpack_require__(73);\r\n\tvar vis_network_service_1 = __webpack_require__(118);\r\n\t/**\r\n\t * Use this directive with a div container to show network data.\r\n\t *\r\n\t * @export\r\n\t * @class VisNetworkDirective\r\n\t * @implements {OnInit}\r\n\t * @implements {OnDestroy}\r\n\t * @implements {OnChanges}\r\n\t */\r\n\tvar VisNetworkDirective = (function () {\r\n\t    /**\r\n\t     * Creates an instance of VisNetworkDirective.\r\n\t     *\r\n\t     * @param {ElementRef} elementRef The HTML element reference.\r\n\t     * @param {VisNetworkService} visNetworkService The VisNetworkService.\r\n\t     *\r\n\t     * @memberOf VisNetworkDirective\r\n\t     */\r\n\t    function VisNetworkDirective(elementRef, visNetworkService) {\r\n\t        this.elementRef = elementRef;\r\n\t        this.visNetworkService = visNetworkService;\r\n\t        /**\r\n\t         * This event will be raised when the network is initialized.\r\n\t         * At this point of time the network is successfully registered\r\n\t         * with the VisNetworkService and you can register to events.\r\n\t         * The event data is the name of the network as a string.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkDirective\r\n\t         */\r\n\t        this.initialized = new core_1.EventEmitter();\r\n\t        this._isInitialized = false;\r\n\t        this._visNetworkContainer = elementRef.nativeElement;\r\n\t    }\r\n\t    /**\r\n\t     * Create the network when at least visNetwork and visNetworkData\r\n\t     * are defined.\r\n\t     *\r\n\t     * @memberOf VisNetworkDirective\r\n\t     */\r\n\t    VisNetworkDirective.prototype.ngOnInit = function () {\r\n\t        if (!this._isInitialized && this.visNetwork && this.visNetworkData) {\r\n\t            this.createNetwork();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Update the network data or options on reference changes to\r\n\t     * the visNetworkData or visNetworkOptions properties.\r\n\t     *\r\n\t     * @param {{[propName: string]: SimpleChange}} changes\r\n\t     *\r\n\t     * @memberOf VisNetworkDirective\r\n\t     */\r\n\t    VisNetworkDirective.prototype.ngOnChanges = function (changes) {\r\n\t        if (!this._isInitialized && this.visNetwork && this.visNetworkData) {\r\n\t            this.createNetwork();\r\n\t        }\r\n\t        for (var propertyName in changes) {\r\n\t            if (changes.hasOwnProperty(propertyName)) {\r\n\t                var change = changes[propertyName];\r\n\t                if (!change.isFirstChange()) {\r\n\t                    if (propertyName === 'visNetworkData') {\r\n\t                        this.visNetworkService.setData(this.visNetwork, changes[propertyName].currentValue);\r\n\t                    }\r\n\t                    if (propertyName === 'visNetworkOptions') {\r\n\t                        this.visNetworkService.setOptions(this.visNetwork, changes[propertyName].currentValue);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Calls the destroy function for this network instance.\r\n\t     *\r\n\t     *\r\n\t     * @memberOf VisNetworkDirective\r\n\t     */\r\n\t    VisNetworkDirective.prototype.ngOnDestroy = function () {\r\n\t        this._isInitialized = false;\r\n\t        this.visNetworkService.destroy(this.visNetwork);\r\n\t    };\r\n\t    VisNetworkDirective.prototype.createNetwork = function () {\r\n\t        this.visNetworkService.create(this.visNetwork, this._visNetworkContainer, this.visNetworkData, this.visNetworkOptions);\r\n\t        this._isInitialized = true;\r\n\t        this.initialized.emit(this.visNetwork);\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Input('visNetwork'), \r\n\t        __metadata('design:type', String)\r\n\t    ], VisNetworkDirective.prototype, \"visNetwork\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Input(), \r\n\t        __metadata('design:type', Object)\r\n\t    ], VisNetworkDirective.prototype, \"visNetworkData\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Input(), \r\n\t        __metadata('design:type', Object)\r\n\t    ], VisNetworkDirective.prototype, \"visNetworkOptions\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Output(), \r\n\t        __metadata('design:type', core_1.EventEmitter)\r\n\t    ], VisNetworkDirective.prototype, \"initialized\", void 0);\r\n\t    VisNetworkDirective = __decorate([\r\n\t        core_1.Directive({\r\n\t            selector: '[visNetwork]'\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [core_1.ElementRef, vis_network_service_1.VisNetworkService])\r\n\t    ], VisNetworkDirective);\r\n\t    return VisNetworkDirective;\r\n\t}());\r\n\texports.VisNetworkDirective = VisNetworkDirective;\r\n\n\n/***/ },\n\n/***/ 118:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(13);\r\n\tvar Vis = __webpack_require__(73);\r\n\t/**\r\n\t * A service to create, manage and control VisNetwork instances.\r\n\t *\r\n\t * @export\r\n\t * @class VisNetworkService\r\n\t */\r\n\tvar VisNetworkService = (function () {\r\n\t    function VisNetworkService() {\r\n\t        /**\r\n\t         * Fired when the user clicks the mouse or taps on a touchscreen device.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.click = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the user double clicks the mouse or double taps on a touchscreen device.\r\n\t         * Since a double click is in fact 2 clicks, 2 click events are fired, followed by a double click event.\r\n\t         * If you do not want to use the click events if a double click event is fired,\r\n\t         * just check the time between click events before processing them.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.doubleClick = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the user click on the canvas with the right mouse button.\r\n\t         * The right mouse button does not select by default.\r\n\t         * You can use the method getNodeAt to select the node if you want.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.oncontext = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the user clicks and holds the mouse or taps and holds on a touchscreen device.\r\n\t         * A click event is also fired in this case.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.hold = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired after drawing on the canvas has been completed.\r\n\t         * Can be used to draw on top of the network.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.release = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the selection has changed by user action.\r\n\t         * This means a node or edge has been selected, added to the selection or deselected.\r\n\t         * All select events are only triggered on click and hold.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.select = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when a node has been selected by the user.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.selectNode = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when a edge has been selected by the user.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.selectEdge = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when a node (or nodes) has (or have) been deselected by the user.\r\n\t         * The previous selection is the list of nodes and edges that were selected before the last user event.\r\n\t         *\r\n\t         * @type {EventEmitter<DeselectInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.deselectNode = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when a edge (or edges) has (or have) been deselected by the user.\r\n\t         * The previous selection is the list of nodes and edges that were selected before the last user event.\r\n\t         *\r\n\t         * @type {EventEmitter<DeselectInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.deselectEdge = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when starting a drag.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.dragStart = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when dragging node(s) or the view.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.dragging = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the drag has finished.\r\n\t         *\r\n\t         * @type {EventEmitter<HumanInteractionEvent>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.dragEnd = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired if the option interaction:{hover:true} is enabled and the mouse hovers over a node.\r\n\t         *\r\n\t         * @type {EventEmitter<{node: string}>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.hoverNode = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired if the option interaction:{hover:true} is enabled and\r\n\t         * the mouse moved away from a node it was hovering over before.\r\n\t         *\r\n\t         * @type {EventEmitter<{node: string}>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.blurNode = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired if the option interaction:{hover:true} is enabled and the mouse hovers over an edge.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.hoverEdge = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired if the option interaction:{hover:true} is enabled and\r\n\t         * the mouse moved away from an edge it was hovering over before.\r\n\t         *\r\n\t         * @type {EventEmitter<{edge: string}>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.blurEdge = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the user zooms in or out.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.zoom = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the popup (tooltip) is shown.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.showPopup = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the popup (tooltip) is hidden.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.hidePopup = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when stabilization starts.\r\n\t         * This is also the case when you drag a node and the physics\r\n\t         * simulation restarts to stabilize again.\r\n\t         * Stabilization does not neccesarily imply 'without showing'.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.startStabilizing = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when a multiple of the updateInterval number of iterations is reached.\r\n\t         * This only occurs in the 'hidden' stabilization.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.stabilizationProgress = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the 'hidden' stabilization finishes.\r\n\t         * This does not necessarily mean the network is stabilized;\r\n\t         * it could also mean that the amount of iterations defined in the options has been reached.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.stabilizationIterationsDone = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the 'hidden' stabilization finishes.\r\n\t         * This does not necessarily mean the network is stabilized;\r\n\t         * it could also mean that the amount of iterations defined in the options has been reached.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.stabilized = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when the size of the canvas has been resized,\r\n\t         * either by a redraw call when the container div has changed in size,\r\n\t         * a setSize() call with new values or a setOptions() with new width and/or height values.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.resize = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired before the redrawing begins.\r\n\t         * The simulation step has completed at this point.\r\n\t         * Can be used to move custom elements before starting drawing the new frame.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.initRedraw = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired after the canvas has been cleared, scaled and translated to\r\n\t         * the viewing position but before all edges and nodes are drawn.\r\n\t         * Can be used to draw behind the network.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.beforeDrawing = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired after drawing on the canvas has been completed.\r\n\t         * Can be used to draw on top of the network.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.afterDrawing = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when an animation is finished.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.animationFinished = new core_1.EventEmitter();\r\n\t        /**\r\n\t         * Fired when a user changes any option in the configurator.\r\n\t         * The options object can be used with the setOptions method or stringified using JSON.stringify().\r\n\t         * You do not have to manually put the options into the network: this is done automatically.\r\n\t         * You can use the event to store user options in the database.\r\n\t         *\r\n\t         * @type {EventEmitter<any>}\r\n\t         * @memberOf VisNetworkService\r\n\t         */\r\n\t        this.configChange = new core_1.EventEmitter();\r\n\t        this._networks = [];\r\n\t    }\r\n\t    /**\r\n\t     * Creates a new network instance.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {HTMLElement} container The HTML element that contains the network view.\r\n\t     * @param {Vis.IData} data The initial network nodes and edges.\r\n\t     * @param {Vis.IOptions} [options] The network options.\r\n\t     *\r\n\t     * @throws {Error} Thrown when a network with the same name already exists.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.create = function (visNetwork, container, data, options) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" already exists.\");\r\n\t        }\r\n\t        this._networks[visNetwork] = new Vis.Network(container, data, options);\r\n\t    };\r\n\t    /**\r\n\t     * Remove the network from the DOM and remove all Hammer bindings and references.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.destroy = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].destroy();\r\n\t            delete this._networks[visNetwork];\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Activates an event.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {string} eventName The event name.\r\n\t     * @returns {boolean} Returns true when the event was activated.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.on = function (visNetwork, eventName) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            var that_1 = this;\r\n\t            this._networks[visNetwork].on(eventName, function (params) {\r\n\t                var emitter = that_1[eventName];\r\n\t                if (emitter) {\r\n\t                    emitter.emit(params ? [visNetwork].concat(params) : visNetwork);\r\n\t                }\r\n\t            });\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * Deactivates an event.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {string} eventName The event name.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.off = function (visNetwork, eventName) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].off(eventName);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Activates an event listener only once.\r\n\t     * After it has taken place, the event listener will be removed.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {string} eventName The event name.\r\n\t     * @returns {boolean} Returns true when the event was activated.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.once = function (visNetwork, eventName) {\r\n\t        var _this = this;\r\n\t        if (this._networks[visNetwork]) {\r\n\t            var that_2 = this;\r\n\t            this._networks[visNetwork].on(eventName, function (params) {\r\n\t                var emitter = that_2[eventName];\r\n\t                if (emitter) {\r\n\t                    emitter.emit(params ? [visNetwork].concat(params) : visNetwork);\r\n\t                    _this.off(visNetwork, eventName);\r\n\t                }\r\n\t            });\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * Override all the data in the network.\r\n\t     * If stabilization is enabled in the physics module,\r\n\t     * the network will stabilize again.\r\n\t     * This method is also performed when first initializing the network.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {Vis.IData} data The network data.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.setData = function (visNetwork, data) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].setData(data);\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Set the options.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {Vis.IOptions} options The network options.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.setOptions = function (visNetwork, options) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].setOptions(options);\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Selects the nodes corresponding to the id's in the input array.\r\n\t     * This method unselects all other objects before selecting its own objects.\r\n\t     * Does not fire events.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {string[]} nodeIds The node ids that should be selected.\r\n\t     * @param {boolean} [highlightEdges] If highlightEdges is true or undefined,\r\n\t     *                                   the neighbouring edges will also be selected.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.selectNodes = function (visNetwork, nodeIds, highlightEdges) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].selectNodes(nodeIds, highlightEdges);\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Returns an object with selected nodes and edges ids.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @returns {{ nodes: string[], edges: string[] }}\r\n\t     * The selected node and edge ids or undefined when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.getSelection = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            return this._networks[visNetwork].getSelection();\r\n\t        }\r\n\t        return undefined;\r\n\t    };\r\n\t    /**\r\n\t     * Returns an array of selected node ids.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @returns {string[]} The selected node ids or undefined when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.getSelectedNodes = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            return this._networks[visNetwork].getSelectedNodes();\r\n\t        }\r\n\t        return undefined;\r\n\t    };\r\n\t    /**\r\n\t     * Returns an array of selected edge ids.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @returns {string[]} The selected edge ids or undefined when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.getSelectedEdges = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            return this._networks[visNetwork].getSelectedEdges();\r\n\t        }\r\n\t        return undefined;\r\n\t    };\r\n\t    /**\r\n\t     * Unselect all objects.\r\n\t     * Does not fire events.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.unselectAll = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].unselectAll();\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Zooms out so all nodes fit on the canvas.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {Vis.IFitOptions} [options] Options to customize.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.fit = function (visNetwork, options) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].fit(options);\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Redraw the network.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.redraw = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].redraw();\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Programatically enable the edit mode.\r\n\t     * Similar effect to pressing the edit button.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.enableEditMode = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].enableEditMode();\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Go into addEdge mode.\r\n\t     * The explaination from addNodeMode applies here as well.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.addEdgeMode = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].addEdgeMode();\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Programatically disable the edit mode.\r\n\t     * Similar effect to pressing the close icon\r\n\t     * (small cross in the corner of the toolbar).\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.disableEditMode = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].disableEditMode();\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Delete selected.\r\n\t     * Having edit mode or manipulation enabled is not required.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.deleteSelected = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].deleteSelected();\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Makes a cluster.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {*} [options] The joinCondition function is presented with all nodes.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.cluster = function (visNetwork, options) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].cluster(options);\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Opens the cluster, releases the contained nodes and edges,\r\n\t     * removing the cluster node and cluster edges.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {string} nodeId The node id that represents the cluster.\r\n\t     * @param {*} [options] Cluster options.\r\n\t     *\r\n\t     * @throws {Error} Thrown when the network does not exist.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.openCluster = function (visNetwork, nodeId, options) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            this._networks[visNetwork].openCluster(nodeId, options);\r\n\t        }\r\n\t        else {\r\n\t            throw new Error(\"Network with id \" + visNetwork + \" not found.\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Returns true if the node whose ID has been supplied is a cluster.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @param {string} nodeId The associated node id.\r\n\t     * @returns {boolean} True if the node whose ID has been supplied is a cluster.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.isCluster = function (visNetwork, nodeId) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            return this._networks[visNetwork].isCluster(nodeId);\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * If you like the layout of your network and would like it to start in the same way next time,\r\n\t     * ask for the seed using this method and put it in the layout.randomSeed option.\r\n\t     *\r\n\t     * @param {string} visNetwork The network name/identifier.\r\n\t     * @returns {number} The seed of the current network or -1 when the network is not defined.\r\n\t     *\r\n\t     * @memberOf VisNetworkService\r\n\t     */\r\n\t    VisNetworkService.prototype.getSeed = function (visNetwork) {\r\n\t        if (this._networks[visNetwork]) {\r\n\t            return this._networks[visNetwork].getSeed();\r\n\t        }\r\n\t        return -1;\r\n\t    };\r\n\t    VisNetworkService = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], VisNetworkService);\r\n\t    return VisNetworkService;\r\n\t}());\r\n\texports.VisNetworkService = VisNetworkService;\r\n\n\n/***/ },\n\n/***/ 287:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(13);\r\n\tvar DemoComponent = (function () {\r\n\t    function DemoComponent() {\r\n\t    }\r\n\t    DemoComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'example-app',\r\n\t            template: \"\\n      <network-example></network-example>\\n  \"\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], DemoComponent);\r\n\t    return DemoComponent;\r\n\t}());\r\n\texports.DemoComponent = DemoComponent;\r\n\n\n/***/ },\n\n/***/ 288:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(13);\r\n\tvar forms_1 = __webpack_require__(74);\r\n\tvar platform_browser_1 = __webpack_require__(52);\r\n\tvar common_1 = __webpack_require__(51);\r\n\tvar network_example_component_1 = __webpack_require__(289);\r\n\tvar ng2_vis_1 = __webpack_require__(290);\r\n\tvar demo_component_1 = __webpack_require__(287);\r\n\tvar VisDemoModule = (function () {\r\n\t    function VisDemoModule() {\r\n\t    }\r\n\t    VisDemoModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            declarations: [\r\n\t                demo_component_1.DemoComponent,\r\n\t                network_example_component_1.VisNetworkExampleComponent\r\n\t            ],\r\n\t            imports: [\r\n\t                platform_browser_1.BrowserModule,\r\n\t                forms_1.FormsModule,\r\n\t                ng2_vis_1.VisModule,\r\n\t                common_1.CommonModule\r\n\t            ],\r\n\t            providers: [],\r\n\t            bootstrap: [demo_component_1.DemoComponent]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], VisDemoModule);\r\n\t    return VisDemoModule;\r\n\t}());\r\n\texports.VisDemoModule = VisDemoModule;\r\n\n\n/***/ },\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar platform_browser_dynamic_1 = __webpack_require__(75);\r\n\tvar demo_module_1 = __webpack_require__(288);\r\n\tplatform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(demo_module_1.VisDemoModule);\r\n\n\n/***/ },\n\n/***/ 120:\n/***/ function(module, exports) {\n\n\tmodule.exports = \".network-canvas {\\n    width: 100%;\\n    height: 400px;\\n    border: 1px solid lightgray;\\n}\"\n\n/***/ },\n\n/***/ 121:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<h2>Network example</h2>\\n\\n<div class=\\\"network-canvas\\\" [visNetwork]=\\\"visNetwork\\\" [visNetworkData]=\\\"visNetworkData\\\" [visNetworkOptions]=\\\"visNetworkOptions\\\" (initialized)=\\\"networkInitialized()\\\"></div>\\n<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"addNode()\\\">Add node</button>\\n\"\n\n/***/ },\n\n/***/ 289:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(13);\r\n\tvar network_1 = __webpack_require__(117);\r\n\tvar VisNetworkExampleComponent = (function () {\r\n\t    function VisNetworkExampleComponent(visNetworkService) {\r\n\t        this.visNetworkService = visNetworkService;\r\n\t        this.visNetwork = 'networkId1';\r\n\t    }\r\n\t    VisNetworkExampleComponent.prototype.addNode = function () {\r\n\t        var length = this.visNetworkData.nodes.length + 1;\r\n\t        this.visNetworkData.nodes.push({ id: length.toString(), label: 'Node ' + length });\r\n\t        var newNetworkData = {\r\n\t            nodes: this.visNetworkData.nodes,\r\n\t            edges: this.visNetworkData.edges\r\n\t        };\r\n\t        this.visNetworkData = newNetworkData;\r\n\t    };\r\n\t    VisNetworkExampleComponent.prototype.networkInitialized = function () {\r\n\t        var _this = this;\r\n\t        // now we can use the service to register on events\r\n\t        this.visNetworkService.on(this.visNetwork, 'click');\r\n\t        // open your console/dev tools to see the click params\r\n\t        this.visNetworkService.click\r\n\t            .subscribe(function (eventData) {\r\n\t            if (eventData[0] === _this.visNetwork) {\r\n\t                console.log(eventData[1]);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t    VisNetworkExampleComponent.prototype.ngOnInit = function () {\r\n\t        this.visNetworkData = {\r\n\t            nodes: [\r\n\t                { id: '1', label: 'Node 1' },\r\n\t                { id: '2', label: 'Node 2' },\r\n\t                { id: '3', label: 'Node 3' },\r\n\t                { id: '4', label: 'Node 4' },\r\n\t                { id: '5', label: 'Node 5' }\r\n\t            ],\r\n\t            edges: [\r\n\t                { from: '1', to: '3' },\r\n\t                { from: '1', to: '2' },\r\n\t                { from: '2', to: '4' },\r\n\t                { from: '2', to: '5' }\r\n\t            ]\r\n\t        };\r\n\t        this.visNetworkOptions = {};\r\n\t    };\r\n\t    VisNetworkExampleComponent.prototype.ngOnDestroy = function () {\r\n\t        this.visNetworkService.off(this.visNetwork, 'click');\r\n\t    };\r\n\t    VisNetworkExampleComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'network-example',\r\n\t            template: __webpack_require__(121),\r\n\t            styles: [\r\n\t                __webpack_require__(120)\r\n\t            ]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [network_1.VisNetworkService])\r\n\t    ], VisNetworkExampleComponent);\r\n\t    return VisNetworkExampleComponent;\r\n\t}());\r\n\texports.VisNetworkExampleComponent = VisNetworkExampleComponent;\r\n\n\n/***/ },\n\n/***/ 290:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(13);\r\n\tvar network_1 = __webpack_require__(117);\r\n\tvar VisModule = (function () {\r\n\t    function VisModule() {\r\n\t    }\r\n\t    VisModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            exports: [network_1.VisNetworkDirective],\r\n\t            declarations: [network_1.VisNetworkDirective],\r\n\t            providers: [network_1.VisNetworkService]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], VisModule);\r\n\t    return VisModule;\r\n\t}());\r\n\texports.VisModule = VisModule;\r\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** main.c1d3693e512a10d939c7.bundle.js\n **/","export * from './vis-network.directive';\r\nexport * from './vis-network.service';\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./components/network/index.ts\n **/","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  OnChanges,\r\n  ElementRef,\r\n  SimpleChange } from '@angular/core';\r\n\r\nimport * as Vis from 'vis';\r\n\r\nimport { VisNetworkService } from './vis-network.service';\r\n\r\n/**\r\n * Use this directive with a div container to show network data.\r\n * \r\n * @export\r\n * @class VisNetworkDirective\r\n * @implements {OnInit}\r\n * @implements {OnDestroy}\r\n * @implements {OnChanges}\r\n */\r\n@Directive({\r\n  selector: '[visNetwork]'\r\n})\r\nexport class VisNetworkDirective implements OnInit, OnDestroy, OnChanges {\r\n\r\n  /**\r\n   * The name or identifier of the network (must be unique in your application).\r\n   * \r\n   * @type {string}\r\n   * @memberOf VisNetworkDirective\r\n   */\r\n  @Input('visNetwork')\r\n  public visNetwork: string;\r\n\r\n  /**\r\n   * The data that will be used to create the network.\r\n   * Changes to the nodes or edges property won't be detected but\r\n   * changes to the reference of this object.\r\n   * Changes leade to a call to setData of this network instance.\r\n   * \r\n   * @type {Vis.IData}\r\n   * @memberOf VisNetworkDirective\r\n   */\r\n  @Input()\r\n  public visNetworkData: Vis.IData;\r\n\r\n  /**\r\n   * The options that will be used with this network instance.\r\n   * Only reference changes to the whole options object will be detected\r\n   * but not changes to properties.\r\n   * Changes lead to a call to setOptions of the network instance.\r\n   * \r\n   * @type {Vis.IOptions}\r\n   * @memberOf VisNetworkDirective\r\n   */\r\n  @Input()\r\n  public visNetworkOptions: Vis.IOptions;\r\n\r\n  /**\r\n   * This event will be raised when the network is initialized.\r\n   * At this point of time the network is successfully registered\r\n   * with the VisNetworkService and you can register to events.\r\n   * The event data is the name of the network as a string.\r\n   * \r\n   * @type {EventEmitter<any>}\r\n   * @memberOf VisNetworkDirective\r\n   */\r\n  @Output()\r\n  public initialized: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private _visNetworkContainer: any;\r\n  private _isInitialized: boolean = false;\r\n\r\n  /**\r\n   * Creates an instance of VisNetworkDirective.\r\n   * \r\n   * @param {ElementRef} elementRef The HTML element reference.\r\n   * @param {VisNetworkService} visNetworkService The VisNetworkService.\r\n   * \r\n   * @memberOf VisNetworkDirective\r\n   */\r\n  public constructor(private elementRef: ElementRef, private visNetworkService: VisNetworkService) {\r\n    this._visNetworkContainer = elementRef.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Create the network when at least visNetwork and visNetworkData\r\n   * are defined. \r\n   * \r\n   * @memberOf VisNetworkDirective\r\n   */\r\n  public ngOnInit(): void {\r\n    if (!this._isInitialized && this.visNetwork && this.visNetworkData) {\r\n      this.createNetwork();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the network data or options on reference changes to\r\n   * the visNetworkData or visNetworkOptions properties.\r\n   * \r\n   * @param {{[propName: string]: SimpleChange}} changes\r\n   * \r\n   * @memberOf VisNetworkDirective\r\n   */\r\n  public ngOnChanges(changes: {[propName: string]: SimpleChange}): void {\r\n\r\n    if (!this._isInitialized && this.visNetwork && this.visNetworkData) {\r\n      this.createNetwork();\r\n    }\r\n\r\n    for (let propertyName in changes) {\r\n      if (changes.hasOwnProperty(propertyName)) {\r\n        let change = changes[propertyName];\r\n        if (!change.isFirstChange()) {\r\n          if (propertyName === 'visNetworkData') {\r\n            this.visNetworkService.setData(this.visNetwork, changes[propertyName].currentValue);\r\n          }\r\n          if (propertyName === 'visNetworkOptions') {\r\n            this.visNetworkService.setOptions(this.visNetwork, changes[propertyName].currentValue);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the destroy function for this network instance.\r\n   * \r\n   * \r\n   * @memberOf VisNetworkDirective\r\n   */\r\n  public ngOnDestroy(): void {\r\n    this._isInitialized = false;\r\n    this.visNetworkService.destroy(this.visNetwork);\r\n  }\r\n\r\n  private createNetwork(): void {\r\n    this.visNetworkService.create(\r\n      this.visNetwork,\r\n      this._visNetworkContainer,\r\n      this.visNetworkData,\r\n      this.visNetworkOptions);\r\n    this._isInitialized = true;\r\n    this.initialized.emit(this.visNetwork);\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./components/network/vis-network.directive.ts\n **/","import { Injectable, EventEmitter } from '@angular/core';\nimport * as Vis from 'vis';\n\nexport interface HumanInteractionEventData {\n\n  /**\n   * Array of selected nodeIds\n   * \n   * @type {string[]}\n   * @memberOf HumanInteractionEventData\n   */\n  nodes: string[];\n\n  /**\n   * Array of selected edgeIds\n   * \n   * @type {string[]}\n   * @memberOf HumanInteractionEventData\n   */\n  edges: string[];\n\n  /**\n   * original click event\n   * \n   * @type {*}\n   * @memberOf HumanInteractionEventData\n   */\n  event: any;\n\n  /**\n   * The current pointer position (DOM and Canvas).\n   * \n   * @type {{\n   *     DOM: Vis.IPosition,\n   *     canvas: Vis.IPosition\n   *   }}\n   * @memberOf HumanInteractionEventData\n   */\n  pointer: {\n    DOM: Vis.IPosition,\n    canvas: Vis.IPosition\n  };\n}\n\nexport interface DeselectInteractionEventData extends HumanInteractionEventData {\n  previousSelection: {\n\n    /**\n     * Array of previously selected nodeIds\n     * \n     * @type {string[]}\n     * @memberOf HumanInteractionEventData\n     */\n    nodes: string[],\n\n    /**\n     * Array of previously selected edgeIds\n     * \n     * @type {string[]}\n     */\n    edges: string[]\n  };\n}\n\nexport interface ResizeEventData {\n  /**\n   * the new width  of the canvas\n   * \n   * @type {number}\n   * @memberOf ResizeEventData\n   */\n  width: number;\n\n  /**\n   * the new height of the canvas\n   * \n   * @type {number}\n   * @memberOf ResizeEventData\n   */\n  height: number;\n\n  /**\n   * the old width  of the canvas\n   * \n   * @type {number}\n   * @memberOf ResizeEventData\n   */\n  oldWidth: number;\n\n  /**\n   * the old height of the canvas\n   * \n   * @type {number}\n   * @memberOf ResizeEventData\n   */\n  oldHeight: number;\n}\n\nexport interface ZoomEvent {\n  /**\n   * '+' or '-'\n   * \n   * @type {string}\n   * @memberOf ZoomEvent\n   */\n  direction: string;\n\n  /**\n   * The scale is a number greater than 0,\n   * which is the same that you get with network.getScale().\n   * \n   * @type {number}\n   * @memberOf ZoomEvent\n   */\n  scale: number;\n}\n\n/**\n * A service to create, manage and control VisNetwork instances.\n * \n * @export\n * @class VisNetworkService\n */\n@Injectable()\nexport class VisNetworkService {\n\n  /**\n   * Fired when the user clicks the mouse or taps on a touchscreen device.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public click: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when the user double clicks the mouse or double taps on a touchscreen device.\n   * Since a double click is in fact 2 clicks, 2 click events are fired, followed by a double click event.\n   * If you do not want to use the click events if a double click event is fired,\n   * just check the time between click events before processing them.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public doubleClick: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when the user click on the canvas with the right mouse button.\n   * The right mouse button does not select by default.\n   * You can use the method getNodeAt to select the node if you want.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public oncontext: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when the user clicks and holds the mouse or taps and holds on a touchscreen device.\n   * A click event is also fired in this case.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public hold: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired after drawing on the canvas has been completed.\n   * Can be used to draw on top of the network.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public release: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when the selection has changed by user action.\n   * This means a node or edge has been selected, added to the selection or deselected.\n   * All select events are only triggered on click and hold.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public select: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when a node has been selected by the user.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public selectNode: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when a edge has been selected by the user.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public selectEdge: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when a node (or nodes) has (or have) been deselected by the user.\n   * The previous selection is the list of nodes and edges that were selected before the last user event.\n   * \n   * @type {EventEmitter<DeselectInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public deselectNode: EventEmitter<DeselectInteractionEventData> = new EventEmitter<DeselectInteractionEventData>();\n\n  /**\n   * Fired when a edge (or edges) has (or have) been deselected by the user.\n   * The previous selection is the list of nodes and edges that were selected before the last user event.\n   * \n   * @type {EventEmitter<DeselectInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public deselectEdge: EventEmitter<DeselectInteractionEventData> = new EventEmitter<DeselectInteractionEventData>();\n\n  /**\n   * Fired when starting a drag.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public dragStart: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when dragging node(s) or the view.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public dragging: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired when the drag has finished.\n   * \n   * @type {EventEmitter<HumanInteractionEvent>}\n   * @memberOf VisNetworkService\n   */\n  public dragEnd: EventEmitter<HumanInteractionEventData> = new EventEmitter<HumanInteractionEventData>();\n\n  /**\n   * Fired if the option interaction:{hover:true} is enabled and the mouse hovers over a node.\n   * \n   * @type {EventEmitter<{node: string}>}\n   * @memberOf VisNetworkService\n   */\n  public hoverNode: EventEmitter<{node: string}> = new EventEmitter<{node: string}>();\n\n  /**\n   * Fired if the option interaction:{hover:true} is enabled and\n   * the mouse moved away from a node it was hovering over before.\n   * \n   * @type {EventEmitter<{node: string}>}\n   * @memberOf VisNetworkService\n   */\n  public blurNode: EventEmitter<{node: string}> = new EventEmitter<{node: string}>();\n\n  /**\n   * Fired if the option interaction:{hover:true} is enabled and the mouse hovers over an edge.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public hoverEdge: EventEmitter<{edge: string}> = new EventEmitter<{edge: string}>();\n\n  /**\n   * Fired if the option interaction:{hover:true} is enabled and\n   * the mouse moved away from an edge it was hovering over before.\n   * \n   * @type {EventEmitter<{edge: string}>}\n   * @memberOf VisNetworkService\n   */\n  public blurEdge: EventEmitter<{edge: string}> = new EventEmitter<{edge: string}>();\n\n  /**\n   * Fired when the user zooms in or out.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public zoom: EventEmitter<ZoomEvent> = new EventEmitter<ZoomEvent>();\n\n  /**\n   * Fired when the popup (tooltip) is shown.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public showPopup: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Fired when the popup (tooltip) is hidden.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public hidePopup: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Fired when stabilization starts.\n   * This is also the case when you drag a node and the physics\n   * simulation restarts to stabilize again.\n   * Stabilization does not neccesarily imply 'without showing'.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public startStabilizing: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Fired when a multiple of the updateInterval number of iterations is reached.\n   * This only occurs in the 'hidden' stabilization.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public stabilizationProgress: EventEmitter<{iterations: number, total: number}> = new EventEmitter<{iterations: number, total: number}>();\n\n  /**\n   * Fired when the 'hidden' stabilization finishes.\n   * This does not necessarily mean the network is stabilized;\n   * it could also mean that the amount of iterations defined in the options has been reached.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public stabilizationIterationsDone: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Fired when the 'hidden' stabilization finishes.\n   * This does not necessarily mean the network is stabilized;\n   * it could also mean that the amount of iterations defined in the options has been reached.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public stabilized: EventEmitter<{iterations: number}> = new EventEmitter<{iterations: number}>();\n\n  /**\n   * Fired when the size of the canvas has been resized,\n   * either by a redraw call when the container div has changed in size,\n   * a setSize() call with new values or a setOptions() with new width and/or height values.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public resize: EventEmitter<ResizeEventData> = new EventEmitter<ResizeEventData>();\n\n  /**\n   * Fired before the redrawing begins.\n   * The simulation step has completed at this point.\n   * Can be used to move custom elements before starting drawing the new frame.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public initRedraw: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Fired after the canvas has been cleared, scaled and translated to\n   * the viewing position but before all edges and nodes are drawn.\n   * Can be used to draw behind the network.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public beforeDrawing: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Fired after drawing on the canvas has been completed.\n   * Can be used to draw on top of the network.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public afterDrawing: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Fired when an animation is finished.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public animationFinished: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Fired when a user changes any option in the configurator.\n   * The options object can be used with the setOptions method or stringified using JSON.stringify().\n   * You do not have to manually put the options into the network: this is done automatically.\n   * You can use the event to store user options in the database.\n   * \n   * @type {EventEmitter<any>}\n   * @memberOf VisNetworkService\n   */\n  public configChange: EventEmitter<any> = new EventEmitter<any>();\n\n  private _networks: {[id: string]: any} = [];\n\n  /**\n   * Creates a new network instance.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {HTMLElement} container The HTML element that contains the network view.\n   * @param {Vis.IData} data The initial network nodes and edges.\n   * @param {Vis.IOptions} [options] The network options.\n   * \n   * @throws {Error} Thrown when a network with the same name already exists.\n   * \n   * @memberOf VisNetworkService\n   */\n  public create(\n    visNetwork: string,\n    container: HTMLElement,\n    data: Vis.IData,\n    options?: Vis.IOptions): void {\n    if (this._networks[visNetwork]) {\n      throw new Error(`Network with id ${visNetwork} already exists.`);\n    }\n\n    this._networks[visNetwork] = new Vis.Network(container, data, options);\n  }\n\n  /**\n   * Remove the network from the DOM and remove all Hammer bindings and references.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * \n   * @memberOf VisNetworkService\n   */\n  public destroy(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].destroy();\n      delete this._networks[visNetwork];\n    }\n  }\n\n  /**\n   * Activates an event.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {string} eventName The event name.\n   * @returns {boolean} Returns true when the event was activated.\n   * \n   * @memberOf VisNetworkService\n   */\n  public on(visNetwork: string, eventName: string): boolean {\n    if (this._networks[visNetwork]) {\n      let that: {[index: string]: any} = this;\n      this._networks[visNetwork].on(eventName, (params: any) => {\n        let emitter = that[eventName] as EventEmitter<any>;\n        if (emitter) {\n          emitter.emit(params ? [visNetwork].concat(params) : visNetwork);\n        }\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Deactivates an event.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {string} eventName The event name.\n   * \n   * @memberOf VisNetworkService\n   */\n  public off(visNetwork: string, eventName: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].off(eventName);\n    }\n  }\n\n  /**\n   * Activates an event listener only once.\n   * After it has taken place, the event listener will be removed.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {string} eventName The event name.\n   * @returns {boolean} Returns true when the event was activated.\n   * \n   * @memberOf VisNetworkService\n   */\n  public once(visNetwork: string, eventName: string): boolean {\n    if (this._networks[visNetwork]) {\n      let that: {[index: string]: any} = this;\n      this._networks[visNetwork].on(eventName, (params: any) => {\n        let emitter = that[eventName] as EventEmitter<any>;\n        if (emitter) {\n          emitter.emit(params ? [visNetwork].concat(params) : visNetwork);\n          this.off(visNetwork, eventName);\n        }\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Override all the data in the network.\n   * If stabilization is enabled in the physics module,\n   * the network will stabilize again.\n   * This method is also performed when first initializing the network.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {Vis.IData} data The network data.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public setData(visNetwork: string, data: Vis.IData): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].setData(data);\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Set the options.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {Vis.IOptions} options The network options.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public setOptions(visNetwork: string, options: Vis.IOptions): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].setOptions(options);\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Selects the nodes corresponding to the id's in the input array.\n   * This method unselects all other objects before selecting its own objects.\n   * Does not fire events.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {string[]} nodeIds The node ids that should be selected.\n   * @param {boolean} [highlightEdges] If highlightEdges is true or undefined,\n   *                                   the neighbouring edges will also be selected.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public selectNodes(visNetwork: string, nodeIds: string[], highlightEdges?: boolean): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].selectNodes(nodeIds, highlightEdges);\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Returns an object with selected nodes and edges ids.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @returns {{ nodes: string[], edges: string[] }}\n   * The selected node and edge ids or undefined when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public getSelection(visNetwork: string): { nodes: string[], edges: string[] } {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].getSelection();\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns an array of selected node ids.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @returns {string[]} The selected node ids or undefined when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public getSelectedNodes(visNetwork: string): string[] {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].getSelectedNodes();\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns an array of selected edge ids.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @returns {string[]} The selected edge ids or undefined when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public getSelectedEdges(visNetwork: string): string[] {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].getSelectedEdges();\n    }\n    return undefined;\n  }\n\n  /**\n   * Unselect all objects.\n   * Does not fire events.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public unselectAll(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].unselectAll();\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Zooms out so all nodes fit on the canvas.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {Vis.IFitOptions} [options] Options to customize.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public fit(visNetwork: string, options?: Vis.IFitOptions): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].fit(options);\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Redraw the network.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public redraw(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].redraw();\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Programatically enable the edit mode.\n   * Similar effect to pressing the edit button.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public enableEditMode(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].enableEditMode();\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Go into addEdge mode.\n   * The explaination from addNodeMode applies here as well.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public addEdgeMode(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].addEdgeMode();\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Programatically disable the edit mode.\n   * Similar effect to pressing the close icon\n   * (small cross in the corner of the toolbar).\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public disableEditMode(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].disableEditMode();\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Delete selected.\n   * Having edit mode or manipulation enabled is not required.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public deleteSelected(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].deleteSelected();\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Makes a cluster.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {*} [options] The joinCondition function is presented with all nodes.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public cluster(visNetwork: string, options?: any): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].cluster(options);\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Opens the cluster, releases the contained nodes and edges,\n   * removing the cluster node and cluster edges.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {string} nodeId The node id that represents the cluster.\n   * @param {*} [options] Cluster options.\n   * \n   * @throws {Error} Thrown when the network does not exist.\n   * \n   * @memberOf VisNetworkService\n   */\n  public openCluster(visNetwork: string, nodeId: string, options?: any): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].openCluster(nodeId, options);\n    } else {\n      throw new Error(`Network with id ${visNetwork} not found.`);\n    }\n  }\n\n  /**\n   * Returns true if the node whose ID has been supplied is a cluster.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @param {string} nodeId The associated node id.\n   * @returns {boolean} True if the node whose ID has been supplied is a cluster.\n   * \n   * @memberOf VisNetworkService\n   */\n  public isCluster(visNetwork: string, nodeId: string): boolean {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].isCluster(nodeId);\n    }\n\n    return false;\n  }\n\n  /**\n   * If you like the layout of your network and would like it to start in the same way next time,\n   * ask for the seed using this method and put it in the layout.randomSeed option.\n   * \n   * @param {string} visNetwork The network name/identifier.\n   * @returns {number} The seed of the current network or -1 when the network is not defined.\n   * \n   * @memberOf VisNetworkService\n   */\n  public getSeed(visNetwork: string): number {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].getSeed();\n    }\n\n    return -1;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./components/network/vis-network.service.ts\n **/","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'example-app',\n  template: `\n      <network-example></network-example>\n  `\n})\nexport class DemoComponent {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demo.component.ts\n **/","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\n\nimport { VisNetworkExampleComponent } from './network/network-example.component';\nimport { VisModule } from '../ng2-vis';\nimport { DemoComponent } from './demo.component';\n\n@NgModule({\n  declarations: [\n    DemoComponent,\n    VisNetworkExampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    VisModule,\n    CommonModule\n  ],\n  providers: [],\n  bootstrap: [DemoComponent]\n})\n\nexport class VisDemoModule {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demo.module.ts\n **/","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { VisDemoModule } from './demo.module';\nplatformBrowserDynamic().bootstrapModule(VisDemoModule);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/index.ts\n **/","module.exports = \".network-canvas {\\n    width: 100%;\\n    height: 400px;\\n    border: 1px solid lightgray;\\n}\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo/network/network-example.component.css\n ** module id = 120\n ** module chunks = 2\n **/","module.exports = \"<h2>Network example</h2>\\n\\n<div class=\\\"network-canvas\\\" [visNetwork]=\\\"visNetwork\\\" [visNetworkData]=\\\"visNetworkData\\\" [visNetworkOptions]=\\\"visNetworkOptions\\\" (initialized)=\\\"networkInitialized()\\\"></div>\\n<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"addNode()\\\">Add node</button>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo/network/network-example.component.html\n ** module id = 121\n ** module chunks = 2\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport * as Vis from 'vis';\n\nimport { VisNetworkService } from '../../components/network';\n\n@Component({\n    selector: 'network-example',\n    template: require('./network-example.component.html'),\n    styles: [\n        require('./network-example.component.css')\n    ]\n})\nexport class VisNetworkExampleComponent implements OnInit, OnDestroy {\n\n    public visNetwork: string = 'networkId1';\n    public visNetworkData: Vis.IData;\n    public visNetworkOptions: Vis.IOptions;\n\n    public constructor(private visNetworkService: VisNetworkService) { }\n\n    public addNode(): void {\n        let length = this.visNetworkData.nodes.length + 1;\n\n        this.visNetworkData.nodes.push({ id: length.toString(), label: 'Node ' + length});\n\n        let newNetworkData: Vis.IData = {\n            nodes: this.visNetworkData.nodes,\n            edges: this.visNetworkData.edges\n        }\n        this.visNetworkData = newNetworkData;\n    }\n\n    public networkInitialized(): void {\n        // now we can use the service to register on events\n        this.visNetworkService.on(this.visNetwork, 'click');\n\n        // open your console/dev tools to see the click params\n        this.visNetworkService.click\n            .subscribe((eventData: any[]) => {\n            if (eventData[0] === this.visNetwork) {\n                console.log(eventData[1]);\n            }\n            });\n    }\n\n    public ngOnInit(): void {\n        this.visNetworkData = {\n            nodes: [\n                { id: '1', label: 'Node 1' },\n                { id: '2', label: 'Node 2' },\n                { id: '3', label: 'Node 3' },\n                { id: '4', label: 'Node 4' },\n                { id: '5', label: 'Node 5' }\n            ],\n            edges: [\n                { from: '1', to: '3' },\n                { from: '1', to: '2' },\n                { from: '2', to: '4' },\n                { from: '2', to: '5' }\n            ]\n        };\n\n        this.visNetworkOptions = {};\n    }\n\n    public ngOnDestroy(): void {\n        this.visNetworkService.off(this.visNetwork, 'click');\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/network/network-example.component.ts\n **/","import { NgModule } from '@angular/core';\r\n\r\nimport { VisNetworkDirective, VisNetworkService } from './components/network';\r\n\r\n@NgModule({\r\n  exports: [VisNetworkDirective],\r\n  declarations: [VisNetworkDirective],\r\n  providers: [VisNetworkService]\r\n})\r\nexport class VisModule { }\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2-vis.ts\n **/"],"sourceRoot":""}