{"version":3,"file":"main.bundle.js","sources":["webpack:///./demo/index.ts","webpack:///./components/network/index.ts","webpack:///./components/network/vis-network.service.ts","webpack:///./demo/network/network-example.component.css","webpack:///./demo/network/network-example.component.html","webpack:///./components/network/vis-network.directive.ts","webpack:///./demo/demo.component.ts","webpack:///./demo/demo.module.ts","webpack:///./demo/network/network-example.component.ts","webpack:///./ng2-vis.ts"],"sourcesContent":["import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { VisDemoModule } from './demo.module';\nplatformBrowserDynamic().bootstrapModule(VisDemoModule);\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/index.ts\n **/","export * from './vis-network.directive';\r\nexport * from './vis-network.service';\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./components/network/index.ts\n **/","import { Injectable, EventEmitter } from '@angular/core';\nimport * as Vis from 'vis';\n\nexport interface IFitOptionsAnimation {\n  duration: number;\n  easingFunction?: string;\n}\n\nexport interface IFitOptions {\n  nodes?: string[];\n  animation?: IFitOptionsAnimation | boolean;\n}\n\n@Injectable()\nexport class VisNetworkService {\n\n  private _networks: {[id: string]: any} = [];\n\n  public click: EventEmitter<any> = new EventEmitter<any>();\n  public doubleClick: EventEmitter<any> = new EventEmitter<any>();\n  public oncontext: EventEmitter<any> = new EventEmitter<any>();\n  public hold: EventEmitter<any> = new EventEmitter<any>();\n  public release: EventEmitter<any> = new EventEmitter<any>();\n  public select: EventEmitter<any> = new EventEmitter<any>();\n  public selectNode: EventEmitter<any> = new EventEmitter<any>();\n  public selectEdge: EventEmitter<any> = new EventEmitter<any>();\n  public deselectNode: EventEmitter<any> = new EventEmitter<any>();\n  public deselectEdge: EventEmitter<any> = new EventEmitter<any>();\n  public dragStart: EventEmitter<any> = new EventEmitter<any>();\n  public dragging: EventEmitter<any> = new EventEmitter<any>();\n  public dragEnd: EventEmitter<any> = new EventEmitter<any>();\n  public hoverNode: EventEmitter<any> = new EventEmitter<any>();\n  public blurNode: EventEmitter<any> = new EventEmitter<any>();\n  public hoverEdge: EventEmitter<any> = new EventEmitter<any>();\n  public blurEdge: EventEmitter<any> = new EventEmitter<any>();\n  public zoom: EventEmitter<any> = new EventEmitter<any>();\n  public showPopup: EventEmitter<any> = new EventEmitter<any>();\n  public hidePopup: EventEmitter<any> = new EventEmitter<any>();\n  public startStabilizing: EventEmitter<any> = new EventEmitter<any>();\n  public stabilizationProgress: EventEmitter<any> = new EventEmitter<any>();\n  public stabilizationIterationsDone: EventEmitter<any> = new EventEmitter<any>();\n  public stabilized: EventEmitter<any> = new EventEmitter<any>();\n  public resize: EventEmitter<any> = new EventEmitter<any>();\n  public initRedraw: EventEmitter<any> = new EventEmitter<any>();\n  public beforeDrawing: EventEmitter<any> = new EventEmitter<any>();\n  public afterDrawing: EventEmitter<any> = new EventEmitter<any>();\n  public animationFinished: EventEmitter<any> = new EventEmitter<any>();\n  public configChange: EventEmitter<any> = new EventEmitter<any>();\n\n  public create(\n    visNetwork: string,\n    container: HTMLElement,\n    data: Vis.IData,\n    options?: Vis.IOptions): void {\n    this._networks[visNetwork] = new Vis.Network(container, data, options);\n  }\n\n  public destroy(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].destroy();\n      delete this._networks[visNetwork];\n    }\n  }\n\n  public on(visNetwork: string, eventName: string): void {\n    if (this._networks[visNetwork]) {\n      let that: {[index: string]: any} = this;\n      this._networks[visNetwork].on(eventName, (params: any) => {\n        let emitter = that[eventName] as EventEmitter<any>;\n        if (emitter) {\n          emitter.emit(params ? [visNetwork].concat(params) : visNetwork);\n        }\n      });\n    }\n  }\n\n  public off(visNetwork: string, eventName: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].off(eventName);\n    }\n  }\n\n  public once(visNetwork: string, eventName: string): void {\n    if (this._networks[visNetwork]) {\n      let that: {[index: string]: any} = this;\n      this._networks[visNetwork].on(eventName, (params: any) => {\n        let emitter = that[eventName] as EventEmitter<any>;\n        if (emitter) {\n          emitter.emit(params ? [visNetwork].concat(params) : visNetwork);\n          this.off(visNetwork, eventName);\n        }\n      });\n    }\n  }\n\n  public setData(visNetwork: string, data: Vis.IData): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].setData(data);\n    }\n  }\n\n  public setOptions(visNetwork: string, options: Vis.IOptions): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].setOptions(options);\n    }\n  }\n\n  public selectNodes(visNetwork: string, nodeIds: string[], highlightEdges?: boolean): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].selectNodes(nodeIds, highlightEdges);\n    }\n  }\n\n  public getSelection(visNetwork: string): Vis.IData {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].getSelection();\n    }\n    return undefined;\n  }\n\n  public getSelectedNodes(visNetwork: string): string[] {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].getSelectedNodes();\n    }\n    return undefined;\n  }\n\n  public getSelectedEdges(visNetwork: string): string[] {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].getSelectedEdges();\n    }\n    return undefined;\n  }\n\n  public unselectAll(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].unselectAll();\n    }\n  }\n\n  public fit(visNetwork: string, options?: IFitOptions): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].fit(options);\n    }\n  }\n\n  public redraw(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].redraw();\n    }\n  }\n\n  public enableEditMode(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].enableEditMode();\n    }\n  }\n\n  public addEdgeMode(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].addEdgeMode();\n    }\n  }\n\n  public disableEditMode(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].disableEditMode();\n    }\n  }\n\n  public deleteSelected(visNetwork: string): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].deleteSelected();\n    }\n  }\n\n  public cluster(visNetwork: string, options?: any): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].cluster(options);\n    }\n  }\n\n  public openCluster(visNetwork: string, nodeId: string, options?: any): void {\n    if (this._networks[visNetwork]) {\n      this._networks[visNetwork].openCluster(nodeId, options);\n    }\n  }\n\n  public isCluster(visNetwork: string, nodeId: string): boolean {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].isCluster(nodeId);\n    }\n\n    return false;\n  }\n\n  public getSeed(visNetwork: string): number {\n    if (this._networks[visNetwork]) {\n      return this._networks[visNetwork].getSeed();\n    }\n\n    return -1;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./components/network/vis-network.service.ts\n **/","module.exports = \".network-canvas {\\n    width: 600px;\\n    height: 400px;\\n    border: 1px solid lightgray;\\n}\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo/network/network-example.component.css\n ** module id = 120\n ** module chunks = 2\n **/","module.exports = \"<h2>Network example</h2>\\n\\n<div class=\\\"network-canvas\\\" [visNetwork]=\\\"visNetwork\\\" [visNetworkData]=\\\"visNetworkData\\\" [visNetworkOptions]=\\\"visNetworkOptions\\\" (initialized)=\\\"networkInitialized()\\\"></div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./demo/network/network-example.component.html\n ** module id = 121\n ** module chunks = 2\n **/","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnChanges,\r\n  ElementRef,\r\n  SimpleChange } from '@angular/core';\r\n\r\nimport * as Vis from 'vis';\r\n\r\nimport { VisNetworkService } from './vis-network.service';\r\n\r\n@Directive({\r\n  selector: '[visNetwork]'\r\n})\r\nexport class VisNetworkDirective implements OnDestroy, OnChanges {\r\n\r\n  @Input('visNetwork') visNetwork: string;\r\n  @Input() visNetworkData: Vis.IData;\r\n  @Input() visNetworkOptions: Vis.IOptions;\r\n  @Output() initialized: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private _visNetworkContainer: any;\r\n\r\n  public constructor(private elementRef: ElementRef, private visNetworkService: VisNetworkService) {\r\n    this._visNetworkContainer = elementRef.nativeElement;\r\n  }\r\n\r\n  public ngOnChanges(changes: {[propName: string]: SimpleChange}): void {\r\n    if (this.visNetwork && this.visNetworkData) {\r\n      this.createNetwork();\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.visNetworkService.destroy(this.visNetwork);\r\n  }\r\n\r\n  private createNetwork() {\r\n    this.visNetworkService.create(\r\n      this.visNetwork,\r\n      this._visNetworkContainer,\r\n      this.visNetworkData,\r\n      this.visNetworkOptions);\r\n    this.initialized.emit(this.visNetwork);\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./components/network/vis-network.directive.ts\n **/","import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <div class=\"examples\">\n      <network-example></network-example>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None\n})\nexport class DemoComponent {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demo.component.ts\n **/","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\n\nimport { VisNetworkExampleComponent } from './network/network-example.component';\nimport { VisModule } from '../ng2-vis';\nimport { DemoComponent } from './demo.component';\n\n@NgModule({\n  declarations: [\n    DemoComponent,\n    VisNetworkExampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    VisModule,\n    CommonModule\n  ],\n  providers: [],\n  bootstrap: [DemoComponent]\n})\n\nexport class VisDemoModule {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demo.module.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport * as Vis from 'vis';\n\nimport { VisNetworkService } from '../../components/network';\n\n@Component({\n    selector: 'network-example',\n    template: require('./network-example.component.html'),\n    styles: [\n        require('./network-example.component.css')\n    ]\n})\nexport class VisNetworkExampleComponent implements OnInit, OnDestroy {\n\n    public visNetwork: string = 'networkId1';\n    public visNetworkData: Vis.IData;\n    public visNetworkOptions: Vis.IOptions;\n\n    public constructor(private visNetworkService: VisNetworkService) { }\n\n    public networkInitialized(): void {\n        // now we can use the service to register on events\n        this.visNetworkService.on(this.visNetwork, 'click');\n\n        // open your console/dev tools to see the click params\n        this.visNetworkService.click\n            .subscribe((eventData: any[]) => {\n            if (eventData[0] === this.visNetwork) {\n                console.log(eventData[1]);\n            }\n            });\n    }\n\n    public ngOnInit(): void {\n        this.visNetworkData = {\n            nodes: [\n                { id: '1', label: 'Node 1' },\n                { id: '2', label: 'Node 2' },\n                { id: '3', label: 'Node 3' },\n                { id: '4', label: 'Node 4' },\n                { id: '5', label: 'Node 5' }\n            ],\n            edges: [\n                { from: '1', to: '3' },\n                { from: '1', to: '2' },\n                { from: '2', to: '4' },\n                { from: '2', to: '5' }\n            ]\n        };\n\n        this.visNetworkOptions = {};\n    }\n\n    public ngOnDestroy(): void {\n        this.visNetworkService.off(this.visNetwork, 'click');\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/network/network-example.component.ts\n **/","import { NgModule } from '@angular/core';\r\n\r\nimport { VisNetworkDirective, VisNetworkService } from './components/network';\r\n\r\n@NgModule({\r\n  exports: [VisNetworkDirective],\r\n  declarations: [VisNetworkDirective],\r\n  providers: [VisNetworkService]\r\n})\r\nexport class VisModule {\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2-vis.ts\n **/"],"mappings":";;;;;;AAAA;AAEA;AACA;;;;;;;;;;;;ACHA;AACA;;;;;;;;;ACDA;AACA;AAaA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4JA;AA1JA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AA7LA;AAAA;;AAAA;AA8LA;AAAA;AA7LA;;;;;;;;ACdA;;;;;;;ACAA;;;;;;;;ACAA;AAUA;AAEA;AAKA;AASA;AAAA;AAAA;AAJA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AA5BA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;;AAAA;AAgCA;AAAA;AA/BA;;;;;;;;;ACjBA;AAWA;AAAA;AACA;AAVA;AAAA;AACA;AACA;AAKA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;;;;;ACXA;AACA;AACA;AACA;AAEA;AACA;AACA;AAiBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAGA;AAAA;AADA;;;;;;;;;ACxBA;AAIA;AASA;AAMA;AAAA;AAJA;AAIA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAlDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6CA;AAAA;AA5CA;;;;;;;;;ACbA;AAEA;AAOA;AAAA;AACA;AANA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;","sourceRoot":""}